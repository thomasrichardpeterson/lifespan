{"version":3,"file":"nDistinct.js","sources":["../../../src/summary/nDistinct.ts"],"sourcesContent":["/**\n * Returns a function that computes the distinct count for a key\n * over an array of items. By default it counts nulls but not undefined\n */\nexport function nDistinct<T extends object>(\n  key: keyof T | ((d: T) => any),\n  options: { includeNull?: boolean; includeUndefined?: boolean } = {}\n) {\n  const keyFn = typeof key === 'function' ? key : (d: T) => d[key];\n\n  return (items: T[]) => {\n    const uniques = new Map();\n    let count = 0;\n\n    for (const item of items) {\n      const value = keyFn(item);\n\n      if (!uniques.has(value)) {\n        // default includes null but not undefined\n        if (\n          (!options.includeUndefined && value === undefined) ||\n          (options.includeNull === false && value === null)\n        ) {\n          continue;\n        }\n\n        count += 1;\n        uniques.set(value, true);\n      }\n    }\n\n    return count;\n  };\n}\n"],"names":[],"mappings":"mBAKE,KACA,UAAiE;AAEjE,QAAM,QAAQ,OAAO,QAAQ,aAAa,MAAM,CAAC,MAAS,EAAE;AAE5D,SAAO,CAAC;AACN,UAAM,UAAU,IAAI;AACpB,QAAI,QAAQ;AAEZ,eAAW,QAAQ;AACjB,YAAM,QAAQ,MAAM;AAEpB,UAAI,CAAC,QAAQ,IAAI;AAEf,YACG,CAAC,QAAQ,oBAAoB,UAAU,UACvC,QAAQ,gBAAgB,SAAS,UAAU;AAE5C;AAAA;AAGF,iBAAS;AACT,gBAAQ,IAAI,OAAO;AAAA;AAAA;AAIvB,WAAO;AAAA;AAAA;;;;"}