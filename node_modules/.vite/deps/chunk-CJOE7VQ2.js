import {
  require_ssf
} from "./chunk-7YZCULM6.js";
import {
  mutate,
  tidy
} from "./chunk-R5XPNIBT.js";
import {
  CUSTOM_FORMATTING_SETTINGS_CONTEXT_KEY
} from "./chunk-U7DPTAY4.js";
import {
  getContext
} from "./chunk-K3QP3VJG.js";
import {
  __toESM
} from "./chunk-4EOJPDL2.js";

// ../../node_modules/@evidence-dev/component-utilities/src/formatting.js
var import_ssf3 = __toESM(require_ssf());

// ../../node_modules/@evidence-dev/component-utilities/src/autoFormatting.js
var import_ssf = __toESM(require_ssf(), 1);
var AUTO_FORMAT_CODE = "auto";
var AUTO_FORMAT_MEDIAN_PRECISION = 3;
var IMPLICIT_COLUMN_AUTO_FORMATS = [
  {
    name: "year",
    description: 'When lowerCase(columnName)="year" with the column having numeric values will result in no formatting',
    matchingFunction: (columnName, evidenceTypeDescriptor, columnUnitSummary) => {
      if (columnName && evidenceTypeDescriptor) {
        return "year" === columnName.toLowerCase() && ((evidenceTypeDescriptor == null ? void 0 : evidenceTypeDescriptor.evidenceType) === "number" || (columnUnitSummary == null ? void 0 : columnUnitSummary.unitType) === "number");
      }
      return false;
    },
    format: {
      formatCode: AUTO_FORMAT_CODE,
      valueType: "number",
      exampleInput: 2013,
      _autoFormat: {
        autoFormatCode: "@",
        truncateUnits: false
      }
    }
  },
  {
    name: "id",
    description: 'When lowerCase(columnName)="id" with the column having numeric values, then values will have no formatting',
    matchingFunction: (columnName, evidenceTypeDescriptor, columnUnitSummary) => {
      if (columnName && evidenceTypeDescriptor) {
        return "id" === columnName.toLowerCase() && ((evidenceTypeDescriptor == null ? void 0 : evidenceTypeDescriptor.evidenceType) === "number" || (columnUnitSummary == null ? void 0 : columnUnitSummary.unitType) === "number");
      }
      return false;
    },
    format: {
      formatCode: AUTO_FORMAT_CODE,
      valueType: "number",
      exampleInput: 93120121,
      _autoFormat: {
        autoFormatFunction: (typedValue) => {
          if (typedValue !== null && typedValue !== void 0 && !isNaN(typedValue)) {
            return typedValue.toLocaleString("fullwide", {
              useGrouping: false
            });
          } else {
            return typedValue;
          }
        }
      }
    }
  },
  {
    name: "defaultDate",
    description: "Formatting for Default Date",
    matchingFunction: (columnName, evidenceTypeDescriptor, columnUnitSummary) => {
      if (evidenceTypeDescriptor) {
        return (evidenceTypeDescriptor == null ? void 0 : evidenceTypeDescriptor.evidenceType) === "date" || (columnUnitSummary == null ? void 0 : columnUnitSummary.unitType) === "date";
      }
      return false;
    },
    format: {
      formatCode: AUTO_FORMAT_CODE,
      valueType: "date",
      exampleInput: "Sat Jan 01 2022 03:15:00 GMT-0500",
      _autoFormat: {
        autoFormatCode: "YYYY-MM-DD",
        truncateUnits: false
      }
    }
  }
];
var applyColumnUnits = (value, unit) => {
  switch (unit) {
    case "T":
      return value / 1e12;
    case "B":
      return value / 1e9;
    case "M":
      return value / 1e6;
    case "k":
      return value / 1e3;
    default:
      return value;
  }
};
var isAutoFormat = (format, effectiveCode) => {
  var _a, _b, _c;
  let matchesCode = ((_a = effectiveCode || format.formatCode) == null ? void 0 : _a.toLowerCase()) === AUTO_FORMAT_CODE;
  let autoFormatCode = ((_b = format._autoFormat) == null ? void 0 : _b.autoFormatFunction) || ((_c = format._autoFormat) == null ? void 0 : _c.autoFormatCode);
  if (matchesCode && autoFormatCode !== void 0) {
    return true;
  } else {
    return false;
  }
};
var generateImplicitNumberFormat = (columnUnitSummary, maxDisplayDecimals = 7) => {
  let effectiveFormatCode;
  let columnUnits = "";
  let median = columnUnitSummary == null ? void 0 : columnUnitSummary.median;
  let truncateUnits;
  if (median !== void 0) {
    let medianInUnitTerms;
    columnUnits = getAutoColumnUnit(median);
    if (columnUnits) {
      medianInUnitTerms = applyColumnUnits(median, columnUnits);
      truncateUnits = true;
    } else {
      medianInUnitTerms = median;
      truncateUnits = false;
    }
    if (columnUnitSummary.maxDecimals === 0 && !truncateUnits) {
      effectiveFormatCode = "#,##0";
    } else {
      effectiveFormatCode = computeNumberAutoFormatCode(medianInUnitTerms, maxDisplayDecimals);
    }
  } else {
    effectiveFormatCode = "#,##0";
    truncateUnits = false;
  }
  return {
    formatCode: AUTO_FORMAT_CODE,
    valueType: "number",
    _autoFormat: {
      autoFormatCode: effectiveFormatCode,
      truncateUnits,
      columnUnits
    }
  };
};
var findImplicitAutoFormat = (columnName, evidenceTypeDescriptor, columnUnitSummary) => {
  let matched = IMPLICIT_COLUMN_AUTO_FORMATS.find(
    (implicitFormat) => implicitFormat.matchingFunction(columnName, evidenceTypeDescriptor, columnUnitSummary)
  );
  if (matched) {
    return matched.format;
  } else {
    if ((columnUnitSummary == null ? void 0 : columnUnitSummary.unitType) === "number" && (columnUnitSummary == null ? void 0 : columnUnitSummary.median) !== void 0) {
      return generateImplicitNumberFormat(columnUnitSummary);
    }
  }
  return void 0;
};
var autoFormat = (typedValue, columnFormat, columnUnitSummary = void 0) => {
  var _a, _b, _c;
  if ((_a = columnFormat._autoFormat) == null ? void 0 : _a.autoFormatFunction) {
    return columnFormat._autoFormat.autoFormatFunction(typedValue, columnFormat, columnUnitSummary);
  } else if (columnFormat._autoFormat.autoFormatCode) {
    let autoFormatCode = (_b = columnFormat == null ? void 0 : columnFormat._autoFormat) == null ? void 0 : _b.autoFormatCode;
    let valueType = columnFormat.valueType;
    if ("number" === valueType) {
      let truncateUnits = (_c = columnFormat == null ? void 0 : columnFormat._autoFormat) == null ? void 0 : _c.truncateUnits;
      let unitValue = typedValue;
      let unit = "";
      if (truncateUnits && (columnUnitSummary == null ? void 0 : columnUnitSummary.median) !== void 0) {
        unit = getAutoColumnUnit(columnUnitSummary.median);
        unitValue = applyColumnUnits(typedValue, unit);
      }
      return import_ssf.default.format(autoFormatCode, unitValue) + unit;
    } else {
      return import_ssf.default.format(autoFormatCode, typedValue);
    }
  } else {
    console.warn("autoFormat called without a formatCode or function");
  }
  return typedValue;
};
var fallbackFormat = (typedValue) => {
  if (typeof typedValue === "number") {
    return typedValue.toLocaleString(void 0, {
      minimumFractionDigits: 0,
      maximumFractionDigits: 2
    });
  } else if (typedValue !== void 0 && typedValue !== null) {
    return typedValue == null ? void 0 : typedValue.toString();
  } else {
    return "-";
  }
};
function computeNumberAutoFormatCode(referenceValue, maxDisplayDecimals = 7, significantDigits = AUTO_FORMAT_MEDIAN_PRECISION) {
  let formatCodeBuilder = "#,##0";
  let referenceValueLeadingDigitExponent = base10Exponent(referenceValue);
  let displayDecimals = 0;
  if (referenceValueLeadingDigitExponent - significantDigits < 0) {
    displayDecimals = Math.min(
      Math.max(Math.abs(referenceValueLeadingDigitExponent - significantDigits + 1), 0),
      maxDisplayDecimals
    );
  }
  if (displayDecimals > 0) {
    formatCodeBuilder += ".";
    formatCodeBuilder += "0".repeat(displayDecimals);
  }
  return formatCodeBuilder;
}
function getAutoColumnUnit(value) {
  let absoluteValue = Math.abs(value);
  if (absoluteValue >= 5e12) {
    return "T";
  } else if (absoluteValue >= 5e9) {
    return "B";
  } else if (absoluteValue >= 5e6) {
    return "M";
  } else if (absoluteValue >= 5e3) {
    return "k";
  } else {
    return "";
  }
}
function base10Exponent(value) {
  if (value === 0) {
    return 0;
  } else {
    return Math.floor(Math.log10(value));
  }
}

// ../../node_modules/@evidence-dev/component-utilities/src/builtInFormats.js
var import_ssf2 = __toESM(require_ssf(), 1);
var SUPPORTED_CURRENCIES = [
  {
    primaryCode: "usd",
    currencySymbol: "$",
    displayName: "USD - United States Dollar"
  },
  {
    primaryCode: "aud",
    currencySymbol: "A$",
    displayName: "AUD - Australian Dollar",
    escapeCurrencySymbol: true
  },
  {
    primaryCode: "brl",
    currencySymbol: "R$",
    displayName: "BRL - Brazilian Real",
    escapeCurrencySymbol: true
  },
  {
    primaryCode: "cad",
    currencySymbol: "C$",
    displayName: "CAD - Canadian Dollar",
    escapeCurrencySymbol: true
  },
  {
    primaryCode: "cny",
    currencySymbol: "¥",
    displayName: "CNY - Renminbi",
    escapeCurrencySymbol: true
  },
  { primaryCode: "eur", currencySymbol: "€", displayName: "EUR - Euro" },
  {
    primaryCode: "gbp",
    currencySymbol: "£",
    displayName: "GBP - Pound Sterling",
    escapeCurrencySymbol: true
  },
  {
    primaryCode: "jpy",
    currencySymbol: "¥",
    displayName: "JPY - Japanese Yen",
    escapeCurrencySymbol: true
  },
  {
    primaryCode: "inr",
    currencySymbol: "₹",
    displayName: "INR - Indian Rupee",
    escapeCurrencySymbol: true
  },
  {
    primaryCode: "krw",
    currencySymbol: "₩",
    displayName: "KRW - South Korean won",
    escapeCurrencySymbol: true
  },
  {
    primaryCode: "ngn",
    currencySymbol: "₦",
    displayName: "NGN -  Nigerian Naira",
    escapeCurrencySymbol: true
  },
  {
    primaryCode: "rub",
    currencySymbol: "rub",
    displayName: "RUB - Russian Ruble",
    escapeCurrencySymbol: true
  },
  {
    primaryCode: "sek",
    currencySymbol: "kr",
    displayName: "SEK - Swedish Krona",
    escapeCurrencySymbol: true
  }
];
var DERIVED_CURRENCY_FORMATS = [
  {
    derivedSuffix: "",
    valueFormatCode: "#,##0",
    exampleInput: 412.17,
    auto: true
  },
  {
    derivedSuffix: "0",
    valueFormatCode: "#,##0",
    exampleInput: 7043.123
  },
  {
    derivedSuffix: "1",
    valueFormatCode: "#,##0.0",
    exampleInput: 7043.123
  },
  {
    derivedSuffix: "2",
    valueFormatCode: "#,##0.00",
    exampleInput: 7043.123
  },
  {
    derivedSuffix: "0k",
    valueFormatCode: '#,##0,"k"',
    exampleInput: 64301.12
  },
  {
    derivedSuffix: "1k",
    valueFormatCode: '#,##0.0,"k"',
    exampleInput: 64301.12
  },
  {
    derivedSuffix: "2k",
    valueFormatCode: '#,##0.00,"k"',
    exampleInput: 64301.12
  },
  {
    derivedSuffix: "0m",
    valueFormatCode: '#,##0,,"M"',
    exampleInput: 456430112e-2
  },
  {
    derivedSuffix: "1m",
    valueFormatCode: '#,##0.0,,"M"',
    exampleInput: 456430112e-2
  },
  {
    derivedSuffix: "2m",
    valueFormatCode: '#,##0.00,,"M"',
    exampleInput: 456430112e-2
  },
  {
    derivedSuffix: "0b",
    valueFormatCode: '#,##0,,,"B"',
    exampleInput: 978456430112e-2
  },
  {
    derivedSuffix: "1b",
    valueFormatCode: '#,##0.0,,,"B"',
    exampleInput: 978456430112e-2
  },
  {
    derivedSuffix: "2b",
    valueFormatCode: '#,##0.00,,,"B"',
    exampleInput: 978456430112e-2
  }
];
var CURRENCY_FORMATS = SUPPORTED_CURRENCIES.map((currency) => {
  let derivedFormats = [];
  DERIVED_CURRENCY_FORMATS.forEach((derivedFormat) => {
    let next = {
      formatTag: currency.primaryCode + derivedFormat.derivedSuffix,
      parentFormat: currency.primaryCode,
      formatCategory: "currency",
      valueType: "number",
      exampleInput: derivedFormat.exampleInput,
      titleTagReplacement: ` (${currency.currencySymbol})`
    };
    let symbolInFormatCode = currency.escapeCurrencySymbol ? `"${currency.currencySymbol}"` : currency.currencySymbol;
    if (derivedFormat.auto || AUTO_FORMAT_CODE === derivedFormat.formatCode) {
      next.formatCode = AUTO_FORMAT_CODE;
      next._autoFormat = {
        autoFormatFunction: (typedValue, columnFormat, columnUnitSummary) => {
          let format = generateImplicitNumberFormat(columnUnitSummary, 2);
          let effectiveCode = `${symbolInFormatCode}${format._autoFormat.autoFormatCode}`;
          let suffix = "";
          let displayValue = typedValue;
          if (format._autoFormat.truncateUnits && format._autoFormat.columnUnits) {
            suffix = format._autoFormat.columnUnits;
            displayValue = applyColumnUnits(typedValue, format._autoFormat.columnUnits);
          } else {
            if (effectiveCode.endsWith(".0")) {
              effectiveCode = effectiveCode + "0";
            }
          }
          return import_ssf2.default.format(effectiveCode, displayValue) + suffix;
        }
      };
    } else {
      next.formatCode = `${symbolInFormatCode}${derivedFormat.valueFormatCode}`;
    }
    if (derivedFormat.axisValueFormatCode) {
      next.axisFormatCode = derivedFormat.axisValueFormatCode;
    }
    derivedFormats.push(next);
  });
  return derivedFormats;
}).flat();
var BUILT_IN_FORMATS = [
  ...CURRENCY_FORMATS,
  //auto formats
  // Date/Time:
  {
    formatTag: "ddd",
    formatCode: "ddd",
    formatCategory: "date",
    valueType: "date",
    exampleInput: "2022-01-09 12:45"
  },
  {
    formatTag: "dddd",
    formatCode: "dddd",
    formatCategory: "date",
    valueType: "date",
    exampleInput: "2022-01-09 12:45"
  },
  {
    formatTag: "mmm",
    formatCode: "mmm",
    formatCategory: "date",
    valueType: "date",
    exampleInput: "2022-01-09 12:45"
  },
  {
    formatTag: "mmmm",
    formatCode: "mmmm",
    formatCategory: "date",
    valueType: "date",
    exampleInput: "2022-01-09 12:45"
  },
  {
    formatTag: "yyyy",
    formatCode: "yyyy",
    formatCategory: "date",
    valueType: "date",
    exampleInput: "2022-01-09 12:45"
  },
  {
    formatTag: "shortdate",
    formatCode: "mmm d/yy",
    formatCategory: "date",
    valueType: "date",
    exampleInput: "2022-01-09 12:45"
  },
  {
    formatTag: "longdate",
    formatCode: "mmmm d, yyyy",
    formatCategory: "date",
    valueType: "date",
    exampleInput: "2022-01-09 12:45"
  },
  {
    formatTag: "fulldate",
    formatCode: "dddd mmmm d, yyyy",
    formatCategory: "date",
    valueType: "date",
    exampleInput: "2022-01-09 12:45"
  },
  {
    formatTag: "mdy",
    formatCode: "m/d/y",
    formatCategory: "date",
    valueType: "date",
    exampleInput: "2022-01-09 12:45"
  },
  {
    formatTag: "dmy",
    formatCode: "d/m/y",
    formatCategory: "date",
    valueType: "date",
    exampleInput: "2022-01-09 12:45"
  },
  {
    formatTag: "hms",
    formatCode: "H:MM:SS AM/PM",
    formatCategory: "date",
    valueType: "date",
    exampleInput: "2022-01-09T11:45:03"
  },
  // Numbers:
  {
    formatTag: "num0",
    formatCode: "#,##0",
    formatCategory: "number",
    valueType: "number",
    exampleInput: 11.23168
  },
  {
    formatTag: "num1",
    formatCode: "#,##0.0",
    formatCategory: "number",
    valueType: "number",
    exampleInput: 11.23168
  },
  {
    formatTag: "num2",
    formatCode: "#,##0.00",
    formatCategory: "number",
    valueType: "number",
    exampleInput: 11.23168
  },
  {
    formatTag: "num3",
    formatCode: "#,##0.000",
    formatCategory: "number",
    valueType: "number",
    exampleInput: 11.23168
  },
  {
    formatTag: "num4",
    formatCode: "#,##0.0000",
    formatCategory: "number",
    valueType: "number",
    exampleInput: 11.23168
  },
  {
    formatTag: "num0k",
    formatCode: '#,##0,"k"',
    formatCategory: "number",
    valueType: "number",
    exampleInput: 64201
  },
  {
    formatTag: "num1k",
    formatCode: '#,##0.0,"k"',
    formatCategory: "number",
    valueType: "number",
    exampleInput: 64201
  },
  {
    formatTag: "num2k",
    formatCode: '#,##0.00,"k"',
    formatCategory: "number",
    valueType: "number",
    exampleInput: 64201
  },
  {
    formatTag: "num0m",
    formatCode: '#,##0,,"M"',
    formatCategory: "number",
    valueType: "number",
    exampleInput: 42539483
  },
  {
    formatTag: "num1m",
    formatCode: '#,##0.0,,"M"',
    formatCategory: "number",
    valueType: "number",
    exampleInput: 42539483
  },
  {
    formatTag: "num2m",
    formatCode: '#,##0.00,,"M"',
    formatCategory: "number",
    valueType: "number",
    exampleInput: 42539483
  },
  {
    formatTag: "num0b",
    formatCode: '#,##0,,,"B"',
    formatCategory: "number",
    valueType: "number",
    exampleInput: 1384937584
  },
  {
    formatTag: "num1b",
    formatCode: '#,##0.0,,,"B"',
    formatCategory: "number",
    valueType: "number",
    exampleInput: 1384937584
  },
  {
    formatTag: "num2b",
    formatCode: '#,##0.00,,,"B"',
    formatCategory: "number",
    valueType: "number",
    exampleInput: 1384937584
  },
  {
    formatTag: "id",
    formatCode: "0",
    formatCategory: "number",
    valueType: "number",
    exampleInput: "921594675",
    titleTagReplacement: " id"
  },
  {
    formatTag: "fract",
    formatCode: "# ?/?",
    formatCategory: "number",
    valueType: "number",
    exampleInput: "0.25"
  },
  {
    formatTag: "mult",
    formatCode: '#,##0.0"x"',
    formatCategory: "number",
    valueType: "number",
    exampleInput: "5.32"
  },
  {
    formatTag: "mult0",
    formatCode: '#,##0"x"',
    formatCategory: "number",
    valueType: "number",
    exampleInput: "5.32"
  },
  {
    formatTag: "mult1",
    formatCode: '#,##0.0"x"',
    formatCategory: "number",
    valueType: "number",
    exampleInput: "5.32"
  },
  {
    formatTag: "mult2",
    formatCode: '#,##0.00"x"',
    formatCategory: "number",
    valueType: "number",
    exampleInput: "5.32"
  },
  {
    formatTag: "sci",
    formatCode: "0.00E+0",
    formatCategory: "number",
    valueType: "number",
    exampleInput: "16546.1561"
  },
  // Percent:
  {
    formatTag: "pct",
    formatCode: AUTO_FORMAT_CODE,
    formatCategory: "percent",
    valueType: "number",
    exampleInput: 0.731,
    titleTagReplacement: "",
    _autoFormat: {
      autoFormatFunction: (typedValue, columnFormat, columnUnitSummary) => {
        if ("number" === (columnUnitSummary == null ? void 0 : columnUnitSummary.unitType)) {
          let adjustedColumnUnitSummary = {
            min: columnUnitSummary.min * 100,
            max: columnUnitSummary.max * 100,
            median: columnUnitSummary.median * 100,
            maxDecimals: Math.max(columnUnitSummary.maxDecimals - 2, 0),
            unitType: columnUnitSummary.unitType
          };
          let format = generateImplicitNumberFormat(adjustedColumnUnitSummary);
          return import_ssf2.default.format(format._autoFormat.autoFormatCode, typedValue * 100) + "%";
        } else {
          return import_ssf2.default.format("#,##0%", typedValue);
        }
      }
    }
  },
  {
    formatTag: "pct0",
    formatCode: "#,##0%",
    formatCategory: "percent",
    valueType: "number",
    exampleInput: 0.731,
    titleTagReplacement: ""
  },
  {
    formatTag: "pct1",
    formatCode: "#,##0.0%",
    formatCategory: "percent",
    valueType: "number",
    exampleInput: 0.731,
    titleTagReplacement: ""
  },
  {
    formatTag: "pct2",
    formatCode: "#,##0.00%",
    formatCategory: "percent",
    valueType: "number",
    exampleInput: 0.731,
    titleTagReplacement: ""
  },
  {
    formatTag: "pct3",
    formatCode: "#,##0.000%",
    formatCategory: "percent",
    valueType: "number",
    exampleInput: 0.731,
    titleTagReplacement: ""
  }
];

// ../../node_modules/@evidence-dev/component-utilities/src/dateParsing.js
function standardizeDateString(date) {
  if (date && typeof date === "string") {
    let dateSplit = date.split(" ");
    if (!date.includes(":")) {
      date = date + "T00:00:00";
    }
    if (dateSplit.length > 2) {
      date = dateSplit[0] + " " + dateSplit[1];
    }
    const re = /\.([^\s]+)/;
    date = date.replace(re, "");
    date = date.replace("Z", "");
    date = date.replace(" ", "T");
  }
  return date;
}
function convertColumnToDate(data, column) {
  data = tidy(
    data,
    mutate({ [column]: (d) => d[column] ? new Date(standardizeDateString(d[column])) : null })
  );
  return data;
}
function standardizeDateColumn(data, column) {
  data = tidy(data, mutate({ [column]: (d) => standardizeDateString(d[column]) }));
  return data;
}

// ../../node_modules/@evidence-dev/component-utilities/src/inferColumnTypes.js
var EvidenceType;
(function(EvidenceType2) {
  EvidenceType2["BOOLEAN"] = "boolean";
  EvidenceType2["NUMBER"] = "number";
  EvidenceType2["STRING"] = "string";
  EvidenceType2["DATE"] = "date";
})(EvidenceType || (EvidenceType = {}));
var TypeFidelity;
(function(TypeFidelity2) {
  TypeFidelity2["INFERRED"] = "inferred";
  TypeFidelity2["PRECISE"] = "precise";
})(TypeFidelity || (TypeFidelity = {}));
var inferValueType = function(columnValue) {
  if (typeof columnValue === "number") {
    return EvidenceType.NUMBER;
  } else if (typeof columnValue === "boolean") {
    return EvidenceType.BOOLEAN;
  } else if (typeof columnValue === "string") {
    let result = EvidenceType.STRING;
    if (columnValue && columnValue.includes("-")) {
      let testDateStr = columnValue;
      if (!columnValue.includes(":")) {
        testDateStr = columnValue + "T00:00";
      }
      try {
        let testDate = new Date(testDateStr);
        if (testDate.toLocaleString().length > 0) {
          let numCheck = Number.parseInt(testDate.toLocaleString().substring(0, 1));
          if (numCheck != null && !isNaN(numCheck)) {
            result = EvidenceType.DATE;
          }
        }
      } catch (err) {
      }
    }
    return result;
  } else if (columnValue instanceof Date) {
    return EvidenceType.DATE;
  } else {
    return EvidenceType.STRING;
  }
};
function inferColumnTypes(rows) {
  if (rows && rows.length > 0) {
    let columns = Object.keys(rows[0]);
    let columnTypes = columns == null ? void 0 : columns.map((column) => {
      let firstRowWithColumnValue = rows.find(
        (element) => element[column] == null ? false : true
      );
      if (firstRowWithColumnValue) {
        let inferredType = inferValueType(firstRowWithColumnValue[column]);
        return { name: column, evidenceType: inferredType, typeFidelity: TypeFidelity.INFERRED };
      } else {
        return {
          name: column,
          evidenceType: EvidenceType.STRING,
          typeFidelity: TypeFidelity.INFERRED
        };
      }
    });
    return columnTypes;
  }
  return void 0;
}

// ../../node_modules/@evidence-dev/component-utilities/src/formatting.js
var AXIS_FORMATTING_CONTEXT = "axis";
var VALUE_FORMATTING_CONTEXT = "value";
var getCustomFormats = () => {
  var _a;
  return ((_a = getContext(CUSTOM_FORMATTING_SETTINGS_CONTEXT_KEY)) == null ? void 0 : _a.getCustomFormats()) || [];
};
var lookupColumnFormat = (columnName, columnEvidenceType, columnUnitSummary) => {
  let potentialFormatTag = maybeExtractFormatTag(columnName);
  if (columnEvidenceType.evidenceType === "string") {
    return void 0;
  }
  if (potentialFormatTag) {
    let customFormats = getCustomFormats();
    let matchingFormat = [...BUILT_IN_FORMATS, ...customFormats].find(
      (format) => {
        var _a;
        return ((_a = format.formatTag) == null ? void 0 : _a.toLowerCase()) === (potentialFormatTag == null ? void 0 : potentialFormatTag.toLowerCase());
      }
    );
    if (matchingFormat) {
      return matchingFormat;
    }
  }
  let matchingImplicitAutoFormat = findImplicitAutoFormat(
    columnName,
    columnEvidenceType,
    columnUnitSummary
  );
  if (matchingImplicitAutoFormat) {
    return matchingImplicitAutoFormat;
  }
  return void 0;
};
function getFormatObjectFromString(formatString, valueType = void 0) {
  let potentialFormatTag = formatString;
  let customFormats = getCustomFormats();
  let matchingFormat = [...BUILT_IN_FORMATS, ...customFormats].find(
    (format) => {
      var _a;
      return ((_a = format.formatTag) == null ? void 0 : _a.toLowerCase()) === (potentialFormatTag == null ? void 0 : potentialFormatTag.toLowerCase());
    }
  );
  let newFormat = {};
  if (matchingFormat) {
    return matchingFormat;
  } else {
    newFormat = {
      formatTag: "custom",
      formatCode: potentialFormatTag
    };
    if (valueType) {
      newFormat.valueType = valueType;
    }
    return newFormat;
  }
}
var formatValue = (value, columnFormat = void 0, columnUnitSummary = void 0) => {
  try {
    return applyFormatting(value, columnFormat, columnUnitSummary, VALUE_FORMATTING_CONTEXT);
  } catch (error) {
    console.warn(
      `Unexpected error calling applyFormatting(${value}, ${columnFormat}, ${VALUE_FORMATTING_CONTEXT}, ${columnUnitSummary}). Error=${error}`
    );
    return value;
  }
};
var formatAxisValue = (value, columnFormat = void 0, columnUnitSummary = void 0) => {
  try {
    return applyFormatting(value, columnFormat, columnUnitSummary, AXIS_FORMATTING_CONTEXT);
  } catch (error) {
  }
  return value;
};
var applyTitleTagReplacement = (columnName, columnFormatSettings) => {
  let result = columnName;
  if (columnName && (columnFormatSettings == null ? void 0 : columnFormatSettings.formatTag)) {
    let lastIndexOfTag = columnName.toLowerCase().lastIndexOf(`_${columnFormatSettings.formatTag.toLowerCase()}`);
    let titleTagReplacement = "";
    if (lastIndexOfTag > 0) {
      if (typeof (columnFormatSettings == null ? void 0 : columnFormatSettings.titleTagReplacement) === "string") {
        titleTagReplacement = columnFormatSettings.titleTagReplacement;
      }
      result = columnName.substring(0, lastIndexOfTag) + titleTagReplacement;
    }
  }
  return result;
};
var defaultExample = (valueType) => {
  switch (valueType) {
    case "number":
      return 1234;
    case "date":
      return "2022-01-03";
    default:
      return void 0;
  }
};
var formatExample = (format) => {
  var _a, _b;
  let normalizedUserInput = (_a = format.userInput) == null ? void 0 : _a.trim();
  let preFormattedValue = normalizedUserInput || format.exampleInput || defaultExample(format.valueType);
  if (preFormattedValue) {
    try {
      let columnUnitSummary = void 0;
      if (format.valueType === "number") {
        let numericValue = Number(preFormattedValue);
        columnUnitSummary = {
          min: numericValue,
          max: numericValue,
          median: numericValue,
          maxDecimals: ((_b = numericValue.toString().split(".")[1]) == null ? void 0 : _b.length) || 0,
          unitType: "number"
        };
      }
      return applyFormatting(
        preFormattedValue,
        format,
        columnUnitSummary,
        VALUE_FORMATTING_CONTEXT
      );
    } catch (error) {
    }
  }
  return "";
};
function applyFormatting(value, columnFormat = void 0, columnUnitSummary = void 0, formattingContext = VALUE_FORMATTING_CONTEXT) {
  if (value === void 0 || value === null) {
    return "-";
  }
  let result = void 0;
  if (columnFormat) {
    try {
      let formattingCode = getEffectiveFormattingCode(columnFormat, formattingContext);
      let typedValue;
      try {
        if (columnFormat.valueType === "date" && typeof value === "string") {
          typedValue = new Date(standardizeDateString(value));
        } else if (columnFormat.valueType === "number" && typeof value !== "number" && !Number.isNaN(value)) {
          typedValue = Number(value);
        } else {
          typedValue = value;
        }
      } catch (error) {
        typedValue = value;
      }
      if (isAutoFormat(columnFormat, formattingCode)) {
        try {
          result = autoFormat(typedValue, columnFormat, columnUnitSummary);
        } catch (error) {
          console.warn(`Unexpected error applying auto formatting. Error=${error}`);
        }
      } else {
        result = import_ssf3.default.format(formattingCode, typedValue);
      }
    } catch (error) {
      console.warn(`Unexpected error applying formatting ${error}`);
    }
  }
  if (result === void 0) {
    result = fallbackFormat(value, columnUnitSummary);
  }
  return result;
}
function getEffectiveFormattingCode(columnFormat, formattingContext = VALUE_FORMATTING_CONTEXT) {
  if (typeof columnFormat === "string") {
    return columnFormat;
  } else {
    if (formattingContext === AXIS_FORMATTING_CONTEXT && (columnFormat == null ? void 0 : columnFormat.axisFormatCode)) {
      return columnFormat.axisFormatCode;
    }
    return columnFormat == null ? void 0 : columnFormat.formatCode;
  }
}
function maybeExtractFormatTag(columnName) {
  let normalizedColName = columnName.toLowerCase();
  let lastUnderScoreIndex = normalizedColName.lastIndexOf("_");
  if (lastUnderScoreIndex > 0) {
    return normalizedColName.substr(lastUnderScoreIndex).replace("_", "");
  } else {
    return void 0;
  }
}
function fmt(value, format) {
  let formatObj = getFormatObjectFromString(format);
  let valueType = inferValueType(value);
  formatObj.valueType = valueType;
  return formatValue(value, formatObj);
}

export {
  SUPPORTED_CURRENCIES,
  BUILT_IN_FORMATS,
  convertColumnToDate,
  standardizeDateColumn,
  inferColumnTypes,
  getCustomFormats,
  lookupColumnFormat,
  getFormatObjectFromString,
  formatValue,
  formatAxisValue,
  applyTitleTagReplacement,
  defaultExample,
  formatExample,
  fmt
};
//# sourceMappingURL=chunk-CJOE7VQ2.js.map
