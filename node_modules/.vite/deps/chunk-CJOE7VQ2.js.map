{
  "version": 3,
  "sources": ["../../@evidence-dev/component-utilities/src/formatting.js", "../../@evidence-dev/component-utilities/src/autoFormatting.js", "../../@evidence-dev/component-utilities/src/builtInFormats.js", "../../@evidence-dev/component-utilities/src/dateParsing.js", "../../@evidence-dev/component-utilities/src/inferColumnTypes.js"],
  "sourcesContent": ["import ssf from 'ssf';\nimport { getContext } from 'svelte';\nimport { CUSTOM_FORMATTING_SETTINGS_CONTEXT_KEY } from './globalContexts';\nimport { findImplicitAutoFormat, autoFormat, fallbackFormat, isAutoFormat } from './autoFormatting';\nimport { BUILT_IN_FORMATS } from './builtInFormats';\nimport { standardizeDateString } from './dateParsing';\nimport { inferValueType } from './inferColumnTypes';\n\nconst AXIS_FORMATTING_CONTEXT = 'axis';\nconst VALUE_FORMATTING_CONTEXT = 'value';\n\nexport const getCustomFormats = () => {\n\treturn getContext(CUSTOM_FORMATTING_SETTINGS_CONTEXT_KEY)?.getCustomFormats() || [];\n};\n\n/**\n * @param {*} columnName the name of the column\n * @returns a format object (built-in or custom) based on the column name if it matches the pattern column_${formatTag}, otherwise returns undefined\n */\nexport const lookupColumnFormat = (columnName, columnEvidenceType, columnUnitSummary) => {\n\tlet potentialFormatTag = maybeExtractFormatTag(columnName);\n\n\tif (columnEvidenceType.evidenceType === 'string') {\n\t\treturn undefined;\n\t}\n\n\tif (potentialFormatTag) {\n\t\tlet customFormats = getCustomFormats();\n\t\tlet matchingFormat = [...BUILT_IN_FORMATS, ...customFormats].find(\n\t\t\t(format) => format.formatTag?.toLowerCase() === potentialFormatTag?.toLowerCase()\n\t\t);\n\t\tif (matchingFormat) {\n\t\t\treturn matchingFormat;\n\t\t}\n\t}\n\n\tlet matchingImplicitAutoFormat = findImplicitAutoFormat(\n\t\tcolumnName,\n\t\tcolumnEvidenceType,\n\t\tcolumnUnitSummary\n\t);\n\tif (matchingImplicitAutoFormat) {\n\t\treturn matchingImplicitAutoFormat;\n\t}\n\n\treturn undefined;\n};\n\n/**\n * Returns an Evidence format object to be used in the applyFormatting function\n * @param {string} formatString string containing an Excel-style format code, or a format name matching a built-in or custom format\n * @param {string} valueType optional - a string representing the data type within the column that will be formatted ('number', 'date', 'boolean', or 'string)\n * @returns a format object based on the formatString matching a built-in or custom format name, or a new custom format object containing an Excel-style format code\n */\nexport function getFormatObjectFromString(formatString, valueType = undefined) {\n\tlet potentialFormatTag = formatString;\n\tlet customFormats = getCustomFormats();\n\tlet matchingFormat = [...BUILT_IN_FORMATS, ...customFormats].find(\n\t\t(format) => format.formatTag?.toLowerCase() === potentialFormatTag?.toLowerCase()\n\t);\n\tlet newFormat = {};\n\tif (matchingFormat) {\n\t\treturn matchingFormat;\n\t} else {\n\t\tnewFormat = {\n\t\t\tformatTag: 'custom',\n\t\t\tformatCode: potentialFormatTag\n\t\t};\n\t\tif (valueType) {\n\t\t\tnewFormat.valueType = valueType;\n\t\t}\n\t\treturn newFormat;\n\t}\n}\n\nexport const formatValue = (value, columnFormat = undefined, columnUnitSummary = undefined) => {\n\ttry {\n\t\treturn applyFormatting(value, columnFormat, columnUnitSummary, VALUE_FORMATTING_CONTEXT);\n\t} catch (error) {\n\t\t//fallback to default\n\t\tconsole.warn(\n\t\t\t`Unexpected error calling applyFormatting(${value}, ${columnFormat}, ${VALUE_FORMATTING_CONTEXT}, ${columnUnitSummary}). Error=${error}`\n\t\t);\n\t\treturn value;\n\t}\n};\n\nexport const formatAxisValue = (value, columnFormat = undefined, columnUnitSummary = undefined) => {\n\ttry {\n\t\treturn applyFormatting(value, columnFormat, columnUnitSummary, AXIS_FORMATTING_CONTEXT);\n\t} catch (error) {\n\t\t//fallback to default\n\t}\n\treturn value;\n};\n\nexport const applyTitleTagReplacement = (columnName, columnFormatSettings) => {\n\tlet result = columnName;\n\tif (columnName && columnFormatSettings?.formatTag) {\n\t\tlet lastIndexOfTag = columnName\n\t\t\t.toLowerCase()\n\t\t\t.lastIndexOf(`_${columnFormatSettings.formatTag.toLowerCase()}`);\n\t\tlet titleTagReplacement = '';\n\t\tif (lastIndexOfTag > 0) {\n\t\t\t//explicitly ignore columns starting with _, hence >0 instead of => 0\n\t\t\tif (typeof columnFormatSettings?.titleTagReplacement === 'string') {\n\t\t\t\ttitleTagReplacement = columnFormatSettings.titleTagReplacement;\n\t\t\t}\n\t\t\tresult = columnName.substring(0, lastIndexOfTag) + titleTagReplacement;\n\t\t}\n\t}\n\treturn result;\n};\n\nexport const defaultExample = (valueType) => {\n\tswitch (valueType) {\n\t\tcase 'number':\n\t\t\treturn 1234;\n\t\tcase 'date':\n\t\t\treturn '2022-01-03';\n\t\tdefault:\n\t\t\treturn undefined;\n\t}\n};\n\nexport const formatExample = (format) => {\n\tlet normalizedUserInput = format.userInput?.trim();\n\tlet preFormattedValue =\n\t\tnormalizedUserInput || format.exampleInput || defaultExample(format.valueType);\n\n\tif (preFormattedValue) {\n\t\ttry {\n\t\t\tlet columnUnitSummary = undefined;\n\t\t\tif (format.valueType === 'number') {\n\t\t\t\tlet numericValue = Number(preFormattedValue);\n\t\t\t\tcolumnUnitSummary = {\n\t\t\t\t\tmin: numericValue,\n\t\t\t\t\tmax: numericValue,\n\t\t\t\t\tmedian: numericValue,\n\t\t\t\t\tmaxDecimals: numericValue.toString().split('.')[1]?.length || 0,\n\t\t\t\t\tunitType: 'number'\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn applyFormatting(\n\t\t\t\tpreFormattedValue,\n\t\t\t\tformat,\n\t\t\t\tcolumnUnitSummary,\n\t\t\t\tVALUE_FORMATTING_CONTEXT\n\t\t\t);\n\t\t} catch (error) {\n\t\t\t//return default value\n\t\t}\n\t}\n\treturn '';\n};\n\nfunction applyFormatting(\n\tvalue,\n\tcolumnFormat = undefined,\n\tcolumnUnitSummary = undefined,\n\tformattingContext = VALUE_FORMATTING_CONTEXT\n) {\n\tif (value === undefined || value === null) {\n\t\treturn '-';\n\t}\n\n\tlet result = undefined;\n\tif (columnFormat) {\n\t\ttry {\n\t\t\tlet formattingCode = getEffectiveFormattingCode(columnFormat, formattingContext);\n\t\t\tlet typedValue;\n\t\t\ttry {\n\t\t\t\tif (columnFormat.valueType === 'date' && typeof value === 'string') {\n\t\t\t\t\ttypedValue = new Date(standardizeDateString(value));\n\t\t\t\t} else if (\n\t\t\t\t\tcolumnFormat.valueType === 'number' &&\n\t\t\t\t\ttypeof value !== 'number' &&\n\t\t\t\t\t!Number.isNaN(value)\n\t\t\t\t) {\n\t\t\t\t\ttypedValue = Number(value);\n\t\t\t\t} else {\n\t\t\t\t\ttypedValue = value;\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\ttypedValue = value;\n\t\t\t}\n\t\t\tif (isAutoFormat(columnFormat, formattingCode)) {\n\t\t\t\ttry {\n\t\t\t\t\tresult = autoFormat(typedValue, columnFormat, columnUnitSummary);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.warn(`Unexpected error applying auto formatting. Error=${error}`);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresult = ssf.format(formattingCode, typedValue);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.warn(`Unexpected error applying formatting ${error}`);\n\t\t}\n\t}\n\tif (result === undefined) {\n\t\tresult = fallbackFormat(value, columnUnitSummary);\n\t}\n\treturn result;\n}\nfunction getEffectiveFormattingCode(columnFormat, formattingContext = VALUE_FORMATTING_CONTEXT) {\n\tif (typeof columnFormat === 'string') {\n\t\t// This should only be used by end users, not by components.\n\t\treturn columnFormat;\n\t} else {\n\t\tif (formattingContext === AXIS_FORMATTING_CONTEXT && columnFormat?.axisFormatCode) {\n\t\t\treturn columnFormat.axisFormatCode;\n\t\t}\n\t\treturn columnFormat?.formatCode;\n\t}\n}\n\n/**\n * Extracts a possible format tag from a column name based on the column name pattern\n * @returns \"column_${formatTag}\" will return ${formatTag} or undefined if the columnName doesn't match the pattern\n */\nfunction maybeExtractFormatTag(columnName) {\n\tlet normalizedColName = columnName.toLowerCase();\n\tlet lastUnderScoreIndex = normalizedColName.lastIndexOf('_');\n\n\tif (lastUnderScoreIndex > 0) {\n\t\treturn normalizedColName.substr(lastUnderScoreIndex).replace('_', '');\n\t} else {\n\t\treturn undefined;\n\t}\n}\n\n/**\n * Formats a value to whichever format is passed in\n * @param {*} value the value to be formatted\n * @param {string} format string containing an Excel-style format code, or a format name matching a built-in or custom format\n * @returns a formatted value\n */\nexport function fmt(value, format) {\n\tlet formatObj = getFormatObjectFromString(format);\n\tlet valueType = inferValueType(value);\n\tformatObj.valueType = valueType;\n\treturn formatValue(value, formatObj);\n}\n", "import ssf from 'ssf';\n\nexport const AUTO_FORMAT_CODE = 'auto';\n\n/**\n * The number of units to display the median value in the series\n */\nconst AUTO_FORMAT_MEDIAN_PRECISION = 3;\n/**\n * Describes implicit formats for columns having a certain name pattern and an evidence type (matched via matchingFunction).\n * This will only be applied to columns that cannot be matched to existing custom or built-in formats.\n * These won't be shown in the settings panel.\n * The ORDER in the array will take precedence as a columnName/evidenceType can be matched to multiple formats\n */\nconst IMPLICIT_COLUMN_AUTO_FORMATS = [\n\t{\n\t\tname: 'year',\n\t\tdescription:\n\t\t\t'When lowerCase(columnName)=\"year\" with the column having numeric values will result in no formatting',\n\t\tmatchingFunction: (columnName, evidenceTypeDescriptor, columnUnitSummary) => {\n\t\t\tif (columnName && evidenceTypeDescriptor) {\n\t\t\t\treturn (\n\t\t\t\t\t'year' === columnName.toLowerCase() &&\n\t\t\t\t\t(evidenceTypeDescriptor?.evidenceType === 'number' ||\n\t\t\t\t\t\tcolumnUnitSummary?.unitType === 'number')\n\t\t\t\t); //TODO use evidence type constant\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t\tformat: {\n\t\t\tformatCode: AUTO_FORMAT_CODE,\n\t\t\tvalueType: 'number',\n\t\t\texampleInput: 2013,\n\t\t\t_autoFormat: {\n\t\t\t\tautoFormatCode: '@',\n\t\t\t\ttruncateUnits: false\n\t\t\t}\n\t\t}\n\t},\n\t{\n\t\tname: 'id',\n\t\tdescription:\n\t\t\t'When lowerCase(columnName)=\"id\" with the column having numeric values, then values will have no formatting',\n\t\tmatchingFunction: (columnName, evidenceTypeDescriptor, columnUnitSummary) => {\n\t\t\tif (columnName && evidenceTypeDescriptor) {\n\t\t\t\treturn (\n\t\t\t\t\t'id' === columnName.toLowerCase() &&\n\t\t\t\t\t(evidenceTypeDescriptor?.evidenceType === 'number' ||\n\t\t\t\t\t\tcolumnUnitSummary?.unitType === 'number')\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t\tformat: {\n\t\t\tformatCode: AUTO_FORMAT_CODE,\n\t\t\tvalueType: 'number',\n\t\t\texampleInput: 93120121,\n\t\t\t_autoFormat: {\n\t\t\t\tautoFormatFunction: (typedValue) => {\n\t\t\t\t\tif (typedValue !== null && typedValue !== undefined && !isNaN(typedValue)) {\n\t\t\t\t\t\treturn typedValue.toLocaleString('fullwide', {\n\t\t\t\t\t\t\tuseGrouping: false\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn typedValue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t{\n\t\tname: 'defaultDate',\n\t\tdescription: 'Formatting for Default Date',\n\t\tmatchingFunction: (columnName, evidenceTypeDescriptor, columnUnitSummary) => {\n\t\t\tif (evidenceTypeDescriptor) {\n\t\t\t\treturn (\n\t\t\t\t\tevidenceTypeDescriptor?.evidenceType === 'date' || columnUnitSummary?.unitType === 'date'\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t\tformat: {\n\t\t\tformatCode: AUTO_FORMAT_CODE,\n\t\t\tvalueType: 'date',\n\t\t\texampleInput: 'Sat Jan 01 2022 03:15:00 GMT-0500',\n\t\t\t_autoFormat: {\n\t\t\t\tautoFormatCode: 'YYYY-MM-DD',\n\t\t\t\ttruncateUnits: false\n\t\t\t}\n\t\t}\n\t}\n];\n\n/**\n *\n * @param {number | undefined} value\n * @param {string} unit\n * @returns {number | undefined} the value in the given unit\n */\nexport const applyColumnUnits = (value, unit) => {\n\tswitch (unit) {\n\t\tcase 'T':\n\t\t\treturn value / 1000000000000;\n\t\tcase 'B':\n\t\t\treturn value / 1000000000;\n\t\tcase 'M':\n\t\t\treturn value / 1000000;\n\t\tcase 'k':\n\t\t\treturn value / 1000;\n\t\tdefault:\n\t\t\treturn value;\n\t}\n};\n\n/**\n *\n * @param {*} format the format to update with auto formatting\n * @param {*} formatCode the code to use\n * @param {*} truncateNumbers should k, M, B column units be applied?\n * @returns the format\n */\nexport const configureAutoFormatting = (format, formatCode = '@', truncateUnits = false) => {\n\tformat._autoFormat = {\n\t\tautoFormatCode: formatCode,\n\t\ttruncateUnits: truncateUnits\n\t};\n\treturn format;\n};\n\nexport const isAutoFormat = (format, effectiveCode) => {\n\tlet matchesCode = (effectiveCode || format.formatCode)?.toLowerCase() === AUTO_FORMAT_CODE;\n\tlet autoFormatCode = format._autoFormat?.autoFormatFunction || format._autoFormat?.autoFormatCode;\n\tif (matchesCode && autoFormatCode !== undefined) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n};\n\nexport const generateImplicitNumberFormat = (columnUnitSummary, maxDisplayDecimals = 7) => {\n\tlet effectiveFormatCode;\n\tlet columnUnits = '';\n\n\tlet median = columnUnitSummary?.median;\n\tlet truncateUnits;\n\n\tif (median !== undefined) {\n\t\tlet medianInUnitTerms;\n\t\tcolumnUnits = getAutoColumnUnit(median);\n\t\tif (columnUnits) {\n\t\t\tmedianInUnitTerms = applyColumnUnits(median, columnUnits);\n\t\t\ttruncateUnits = true;\n\t\t} else {\n\t\t\tmedianInUnitTerms = median;\n\t\t\ttruncateUnits = false;\n\t\t}\n\n\t\tif (columnUnitSummary.maxDecimals === 0 && !truncateUnits) {\n\t\t\teffectiveFormatCode = '#,##0';\n\t\t} else {\n\t\t\teffectiveFormatCode = computeNumberAutoFormatCode(medianInUnitTerms, maxDisplayDecimals);\n\t\t}\n\t} else {\n\t\teffectiveFormatCode = '#,##0';\n\t\ttruncateUnits = false;\n\t}\n\n\treturn {\n\t\tformatCode: AUTO_FORMAT_CODE,\n\t\tvalueType: 'number',\n\t\t_autoFormat: {\n\t\t\tautoFormatCode: effectiveFormatCode,\n\t\t\ttruncateUnits: truncateUnits,\n\t\t\tcolumnUnits: columnUnits\n\t\t}\n\t};\n};\n\nexport const findImplicitAutoFormat = (columnName, evidenceTypeDescriptor, columnUnitSummary) => {\n\tlet matched = IMPLICIT_COLUMN_AUTO_FORMATS.find((implicitFormat) =>\n\t\timplicitFormat.matchingFunction(columnName, evidenceTypeDescriptor, columnUnitSummary)\n\t);\n\tif (matched) {\n\t\treturn matched.format;\n\t} else {\n\t\tif (columnUnitSummary?.unitType === 'number' && columnUnitSummary?.median !== undefined) {\n\t\t\treturn generateImplicitNumberFormat(columnUnitSummary);\n\t\t}\n\t}\n\treturn undefined;\n};\n\n/**\n * Formatting logic for formats with formatCode=AUTO_FORMAT_CODE\n * @param {*} typedValue the value to be formatted\n * @param {*} columnFormat the auto formatting description with _autoFormat settings\n * @param {*} columnUnitSummary the summary of units in the column (only applicable to numbered columns)\n * @returns formattedv value\n */\nexport const autoFormat = (typedValue, columnFormat, columnUnitSummary = undefined) => {\n\tif (columnFormat._autoFormat?.autoFormatFunction) {\n\t\treturn columnFormat._autoFormat.autoFormatFunction(typedValue, columnFormat, columnUnitSummary);\n\t} else if (columnFormat._autoFormat.autoFormatCode) {\n\t\tlet autoFormatCode = columnFormat?._autoFormat?.autoFormatCode;\n\t\tlet valueType = columnFormat.valueType;\n\t\tif ('number' === valueType) {\n\t\t\tlet truncateUnits = columnFormat?._autoFormat?.truncateUnits;\n\n\t\t\tlet unitValue = typedValue;\n\t\t\tlet unit = '';\n\n\t\t\tif (truncateUnits && columnUnitSummary?.median !== undefined) {\n\t\t\t\t//use of median is a bit detached here. Perhaps _autoFormat.truncateUnits could instead be _autoFormat.columnUnits=k|M|B (already done for default currency)\n\t\t\t\t//this will affect the auto currency formatting since they simply rely on the median. Perhaps they should be functions instead.\n\t\t\t\tunit = getAutoColumnUnit(columnUnitSummary.median);\n\t\t\t\tunitValue = applyColumnUnits(typedValue, unit);\n\t\t\t}\n\t\t\treturn ssf.format(autoFormatCode, unitValue) + unit;\n\t\t} else {\n\t\t\treturn ssf.format(autoFormatCode, typedValue);\n\t\t}\n\t} else {\n\t\tconsole.warn('autoFormat called without a formatCode or function');\n\t}\n\treturn typedValue;\n};\n\n/**\n * Formatting for any column without formatting settings\n * @param {*} typedValue a value of type number|date|string\n * @returns the formatted value\n */\nexport const fallbackFormat = (typedValue) => {\n\tif (typeof typedValue === 'number') {\n\t\treturn typedValue.toLocaleString(undefined, {\n\t\t\tminimumFractionDigits: 0,\n\t\t\tmaximumFractionDigits: 2\n\t\t});\n\t} else if (typedValue !== undefined && typedValue !== null) {\n\t\treturn typedValue?.toString();\n\t} else {\n\t\treturn '-';\n\t}\n};\n\n//TODO: use rewire.js to enable testing without exporting.\n/**\n * @param {number} referenceValue\n * @returns {string} the number format code for the given reference value\n */\nexport function computeNumberAutoFormatCode(\n\treferenceValue,\n\tmaxDisplayDecimals = 7,\n\tsignificantDigits = AUTO_FORMAT_MEDIAN_PRECISION\n) {\n\tlet formatCodeBuilder = '#,##0';\n\n\tlet referenceValueLeadingDigitExponent = base10Exponent(referenceValue);\n\tlet displayDecimals = 0;\n\n\tif (referenceValueLeadingDigitExponent - significantDigits < 0) {\n\t\tdisplayDecimals = Math.min(\n\t\t\tMath.max(Math.abs(referenceValueLeadingDigitExponent - significantDigits + 1), 0),\n\t\t\tmaxDisplayDecimals\n\t\t);\n\t}\n\n\tif (displayDecimals > 0) {\n\t\tformatCodeBuilder += '.';\n\t\tformatCodeBuilder += '0'.repeat(displayDecimals);\n\t}\n\n\treturn formatCodeBuilder;\n}\n\n/**\n * @param {number | undefined} value\n * @returns {string} the appropriate unit (B, M, k or '') for the given value\n */\nfunction getAutoColumnUnit(value) {\n\tlet absoluteValue = Math.abs(value);\n\tif (absoluteValue >= 5000000000000) {\n\t\treturn 'T';\n\t} else if (absoluteValue >= 5000000000) {\n\t\treturn 'B';\n\t} else if (absoluteValue >= 5000000) {\n\t\treturn 'M';\n\t} else if (absoluteValue >= 5000) {\n\t\treturn 'k';\n\t} else {\n\t\treturn '';\n\t}\n}\n\nfunction base10Exponent(value) {\n\tif (value === 0) {\n\t\treturn 0;\n\t} else {\n\t\treturn Math.floor(Math.log10(value));\n\t}\n}\n", "import { AUTO_FORMAT_CODE, applyColumnUnits, generateImplicitNumberFormat } from './autoFormatting';\nimport ssf from 'ssf';\n\nexport const SUPPORTED_CURRENCIES = [\n\t{\n\t\tprimaryCode: 'usd',\n\t\tcurrencySymbol: '$',\n\t\tdisplayName: 'USD - United States Dollar'\n\t},\n\t{\n\t\tprimaryCode: 'aud',\n\t\tcurrencySymbol: 'A$',\n\t\tdisplayName: 'AUD - Australian Dollar',\n\t\tescapeCurrencySymbol: true\n\t},\n\t{\n\t\tprimaryCode: 'brl',\n\t\tcurrencySymbol: 'R$',\n\t\tdisplayName: 'BRL - Brazilian Real',\n\t\tescapeCurrencySymbol: true\n\t},\n\t{\n\t\tprimaryCode: 'cad',\n\t\tcurrencySymbol: 'C$',\n\t\tdisplayName: 'CAD - Canadian Dollar',\n\t\tescapeCurrencySymbol: true\n\t},\n\t{\n\t\tprimaryCode: 'cny',\n\t\tcurrencySymbol: '¥',\n\t\tdisplayName: 'CNY - Renminbi',\n\t\tescapeCurrencySymbol: true\n\t},\n\t{ primaryCode: 'eur', currencySymbol: '€', displayName: 'EUR - Euro' },\n\t{\n\t\tprimaryCode: 'gbp',\n\t\tcurrencySymbol: '£',\n\t\tdisplayName: 'GBP - Pound Sterling',\n\t\tescapeCurrencySymbol: true\n\t},\n\t{\n\t\tprimaryCode: 'jpy',\n\t\tcurrencySymbol: '¥',\n\t\tdisplayName: 'JPY - Japanese Yen',\n\t\tescapeCurrencySymbol: true\n\t},\n\t{\n\t\tprimaryCode: 'inr',\n\t\tcurrencySymbol: '₹',\n\t\tdisplayName: 'INR - Indian Rupee',\n\t\tescapeCurrencySymbol: true\n\t},\n\t{\n\t\tprimaryCode: 'krw',\n\t\tcurrencySymbol: '₩',\n\t\tdisplayName: 'KRW - South Korean won',\n\t\tescapeCurrencySymbol: true\n\t},\n\t{\n\t\tprimaryCode: 'ngn',\n\t\tcurrencySymbol: '₦',\n\t\tdisplayName: 'NGN -  Nigerian Naira',\n\t\tescapeCurrencySymbol: true\n\t},\n\t{\n\t\tprimaryCode: 'rub',\n\t\tcurrencySymbol: 'rub',\n\t\tdisplayName: 'RUB - Russian Ruble',\n\t\tescapeCurrencySymbol: true\n\t},\n\t{\n\t\tprimaryCode: 'sek',\n\t\tcurrencySymbol: 'kr',\n\t\tdisplayName: 'SEK - Swedish Krona',\n\t\tescapeCurrencySymbol: true\n\t}\n];\n\nconst DERIVED_CURRENCY_FORMATS = [\n\t{\n\t\tderivedSuffix: '',\n\t\tvalueFormatCode: '#,##0',\n\t\texampleInput: 412.17,\n\t\tauto: true\n\t},\n\t{\n\t\tderivedSuffix: '0',\n\t\tvalueFormatCode: '#,##0',\n\t\texampleInput: 7043.123\n\t},\n\t{\n\t\tderivedSuffix: '1',\n\t\tvalueFormatCode: '#,##0.0',\n\t\texampleInput: 7043.123\n\t},\n\t{\n\t\tderivedSuffix: '2',\n\t\tvalueFormatCode: '#,##0.00',\n\t\texampleInput: 7043.123\n\t},\n\t{\n\t\tderivedSuffix: '0k',\n\t\tvalueFormatCode: '#,##0,\"k\"',\n\t\texampleInput: 64301.12\n\t},\n\t{\n\t\tderivedSuffix: '1k',\n\t\tvalueFormatCode: '#,##0.0,\"k\"',\n\t\texampleInput: 64301.12\n\t},\n\t{\n\t\tderivedSuffix: '2k',\n\t\tvalueFormatCode: '#,##0.00,\"k\"',\n\t\texampleInput: 64301.12\n\t},\n\t{\n\t\tderivedSuffix: '0m',\n\t\tvalueFormatCode: '#,##0,,\"M\"',\n\t\texampleInput: 4564301.12\n\t},\n\t{\n\t\tderivedSuffix: '1m',\n\t\tvalueFormatCode: '#,##0.0,,\"M\"',\n\t\texampleInput: 4564301.12\n\t},\n\t{\n\t\tderivedSuffix: '2m',\n\t\tvalueFormatCode: '#,##0.00,,\"M\"',\n\t\texampleInput: 4564301.12\n\t},\n\t{\n\t\tderivedSuffix: '0b',\n\t\tvalueFormatCode: '#,##0,,,\"B\"',\n\t\texampleInput: 9784564301.12\n\t},\n\t{\n\t\tderivedSuffix: '1b',\n\t\tvalueFormatCode: '#,##0.0,,,\"B\"',\n\t\texampleInput: 9784564301.12\n\t},\n\t{\n\t\tderivedSuffix: '2b',\n\t\tvalueFormatCode: '#,##0.00,,,\"B\"',\n\t\texampleInput: 9784564301.12\n\t}\n];\n\nconst CURRENCY_FORMATS = SUPPORTED_CURRENCIES.map((currency) => {\n\tlet derivedFormats = [];\n\tDERIVED_CURRENCY_FORMATS.forEach((derivedFormat) => {\n\t\tlet next = {\n\t\t\tformatTag: currency.primaryCode + derivedFormat.derivedSuffix,\n\t\t\tparentFormat: currency.primaryCode,\n\t\t\tformatCategory: 'currency',\n\t\t\tvalueType: 'number',\n\t\t\texampleInput: derivedFormat.exampleInput,\n\t\t\ttitleTagReplacement: ` (${currency.currencySymbol})`\n\t\t};\n\t\tlet symbolInFormatCode = currency.escapeCurrencySymbol\n\t\t\t? `\"${currency.currencySymbol}\"`\n\t\t\t: currency.currencySymbol;\n\t\tif (derivedFormat.auto || AUTO_FORMAT_CODE === derivedFormat.formatCode) {\n\t\t\tnext.formatCode = AUTO_FORMAT_CODE;\n\t\t\t//TODO This should be fixed so that 1)the format is NOT recomputed for each value, 2)remove some of magic is done to make it look good.\n\t\t\tnext._autoFormat = {\n\t\t\t\tautoFormatFunction: (typedValue, columnFormat, columnUnitSummary) => {\n\t\t\t\t\tlet format = generateImplicitNumberFormat(columnUnitSummary, 2);\n\t\t\t\t\tlet effectiveCode = `${symbolInFormatCode}${format._autoFormat.autoFormatCode}`;\n\t\t\t\t\tlet suffix = '';\n\t\t\t\t\tlet displayValue = typedValue;\n\t\t\t\t\tif (format._autoFormat.truncateUnits && format._autoFormat.columnUnits) {\n\t\t\t\t\t\tsuffix = format._autoFormat.columnUnits;\n\t\t\t\t\t\tdisplayValue = applyColumnUnits(typedValue, format._autoFormat.columnUnits);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (effectiveCode.endsWith('.0')) {\n\t\t\t\t\t\t\teffectiveCode = effectiveCode + '0';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn ssf.format(effectiveCode, displayValue) + suffix;\n\t\t\t\t}\n\t\t\t};\n\t\t} else {\n\t\t\tnext.formatCode = `${symbolInFormatCode}${derivedFormat.valueFormatCode}`;\n\t\t}\n\t\tif (derivedFormat.axisValueFormatCode) {\n\t\t\tnext.axisFormatCode = derivedFormat.axisValueFormatCode;\n\t\t}\n\t\tderivedFormats.push(next);\n\t});\n\treturn derivedFormats;\n}).flat();\n\nexport const BUILT_IN_FORMATS = [\n\t...CURRENCY_FORMATS,\n\t//auto formats\n\t// Date/Time:\n\t{\n\t\tformatTag: 'ddd',\n\t\tformatCode: 'ddd',\n\t\tformatCategory: 'date',\n\t\tvalueType: 'date',\n\t\texampleInput: '2022-01-09 12:45'\n\t},\n\t{\n\t\tformatTag: 'dddd',\n\t\tformatCode: 'dddd',\n\t\tformatCategory: 'date',\n\t\tvalueType: 'date',\n\t\texampleInput: '2022-01-09 12:45'\n\t},\n\t{\n\t\tformatTag: 'mmm',\n\t\tformatCode: 'mmm',\n\t\tformatCategory: 'date',\n\t\tvalueType: 'date',\n\t\texampleInput: '2022-01-09 12:45'\n\t},\n\t{\n\t\tformatTag: 'mmmm',\n\t\tformatCode: 'mmmm',\n\t\tformatCategory: 'date',\n\t\tvalueType: 'date',\n\t\texampleInput: '2022-01-09 12:45'\n\t},\n\t{\n\t\tformatTag: 'yyyy',\n\t\tformatCode: 'yyyy',\n\t\tformatCategory: 'date',\n\t\tvalueType: 'date',\n\t\texampleInput: '2022-01-09 12:45'\n\t},\n\t{\n\t\tformatTag: 'shortdate',\n\t\tformatCode: 'mmm d/yy',\n\t\tformatCategory: 'date',\n\t\tvalueType: 'date',\n\t\texampleInput: '2022-01-09 12:45'\n\t},\n\t{\n\t\tformatTag: 'longdate',\n\t\tformatCode: 'mmmm d, yyyy',\n\t\tformatCategory: 'date',\n\t\tvalueType: 'date',\n\t\texampleInput: '2022-01-09 12:45'\n\t},\n\t{\n\t\tformatTag: 'fulldate',\n\t\tformatCode: 'dddd mmmm d, yyyy',\n\t\tformatCategory: 'date',\n\t\tvalueType: 'date',\n\t\texampleInput: '2022-01-09 12:45'\n\t},\n\t{\n\t\tformatTag: 'mdy',\n\t\tformatCode: 'm/d/y',\n\t\tformatCategory: 'date',\n\t\tvalueType: 'date',\n\t\texampleInput: '2022-01-09 12:45'\n\t},\n\t{\n\t\tformatTag: 'dmy',\n\t\tformatCode: 'd/m/y',\n\t\tformatCategory: 'date',\n\t\tvalueType: 'date',\n\t\texampleInput: '2022-01-09 12:45'\n\t},\n\t{\n\t\tformatTag: 'hms',\n\t\tformatCode: 'H:MM:SS AM/PM',\n\t\tformatCategory: 'date',\n\t\tvalueType: 'date',\n\t\texampleInput: '2022-01-09T11:45:03'\n\t},\n\t// Numbers:\n\t{\n\t\tformatTag: 'num0',\n\t\tformatCode: '#,##0',\n\t\tformatCategory: 'number',\n\t\tvalueType: 'number',\n\t\texampleInput: 11.23168\n\t},\n\t{\n\t\tformatTag: 'num1',\n\t\tformatCode: '#,##0.0',\n\t\tformatCategory: 'number',\n\t\tvalueType: 'number',\n\t\texampleInput: 11.23168\n\t},\n\t{\n\t\tformatTag: 'num2',\n\t\tformatCode: '#,##0.00',\n\t\tformatCategory: 'number',\n\t\tvalueType: 'number',\n\t\texampleInput: 11.23168\n\t},\n\t{\n\t\tformatTag: 'num3',\n\t\tformatCode: '#,##0.000',\n\t\tformatCategory: 'number',\n\t\tvalueType: 'number',\n\t\texampleInput: 11.23168\n\t},\n\t{\n\t\tformatTag: 'num4',\n\t\tformatCode: '#,##0.0000',\n\t\tformatCategory: 'number',\n\t\tvalueType: 'number',\n\t\texampleInput: 11.23168\n\t},\n\t{\n\t\tformatTag: 'num0k',\n\t\tformatCode: '#,##0,\"k\"',\n\t\tformatCategory: 'number',\n\t\tvalueType: 'number',\n\t\texampleInput: 64201\n\t},\n\t{\n\t\tformatTag: 'num1k',\n\t\tformatCode: '#,##0.0,\"k\"',\n\t\tformatCategory: 'number',\n\t\tvalueType: 'number',\n\t\texampleInput: 64201\n\t},\n\t{\n\t\tformatTag: 'num2k',\n\t\tformatCode: '#,##0.00,\"k\"',\n\t\tformatCategory: 'number',\n\t\tvalueType: 'number',\n\t\texampleInput: 64201\n\t},\n\t{\n\t\tformatTag: 'num0m',\n\t\tformatCode: '#,##0,,\"M\"',\n\t\tformatCategory: 'number',\n\t\tvalueType: 'number',\n\t\texampleInput: 42539483\n\t},\n\t{\n\t\tformatTag: 'num1m',\n\t\tformatCode: '#,##0.0,,\"M\"',\n\t\tformatCategory: 'number',\n\t\tvalueType: 'number',\n\t\texampleInput: 42539483\n\t},\n\t{\n\t\tformatTag: 'num2m',\n\t\tformatCode: '#,##0.00,,\"M\"',\n\t\tformatCategory: 'number',\n\t\tvalueType: 'number',\n\t\texampleInput: 42539483\n\t},\n\t{\n\t\tformatTag: 'num0b',\n\t\tformatCode: '#,##0,,,\"B\"',\n\t\tformatCategory: 'number',\n\t\tvalueType: 'number',\n\t\texampleInput: 1384937584\n\t},\n\t{\n\t\tformatTag: 'num1b',\n\t\tformatCode: '#,##0.0,,,\"B\"',\n\t\tformatCategory: 'number',\n\t\tvalueType: 'number',\n\t\texampleInput: 1384937584\n\t},\n\t{\n\t\tformatTag: 'num2b',\n\t\tformatCode: '#,##0.00,,,\"B\"',\n\t\tformatCategory: 'number',\n\t\tvalueType: 'number',\n\t\texampleInput: 1384937584\n\t},\n\t{\n\t\tformatTag: 'id',\n\t\tformatCode: '0',\n\t\tformatCategory: 'number',\n\t\tvalueType: 'number',\n\t\texampleInput: '921594675',\n\t\ttitleTagReplacement: ' id'\n\t},\n\t{\n\t\tformatTag: 'fract',\n\t\tformatCode: '# ?/?',\n\t\tformatCategory: 'number',\n\t\tvalueType: 'number',\n\t\texampleInput: '0.25'\n\t},\n\t{\n\t\tformatTag: 'mult',\n\t\tformatCode: '#,##0.0\"x\"',\n\t\tformatCategory: 'number',\n\t\tvalueType: 'number',\n\t\texampleInput: '5.32'\n\t},\n\t{\n\t\tformatTag: 'mult0',\n\t\tformatCode: '#,##0\"x\"',\n\t\tformatCategory: 'number',\n\t\tvalueType: 'number',\n\t\texampleInput: '5.32'\n\t},\n\t{\n\t\tformatTag: 'mult1',\n\t\tformatCode: '#,##0.0\"x\"',\n\t\tformatCategory: 'number',\n\t\tvalueType: 'number',\n\t\texampleInput: '5.32'\n\t},\n\t{\n\t\tformatTag: 'mult2',\n\t\tformatCode: '#,##0.00\"x\"',\n\t\tformatCategory: 'number',\n\t\tvalueType: 'number',\n\t\texampleInput: '5.32'\n\t},\n\t{\n\t\tformatTag: 'sci',\n\t\tformatCode: '0.00E+0',\n\t\tformatCategory: 'number',\n\t\tvalueType: 'number',\n\t\texampleInput: '16546.1561'\n\t},\n\n\t// Percent:\n\t{\n\t\tformatTag: 'pct',\n\t\tformatCode: AUTO_FORMAT_CODE,\n\t\tformatCategory: 'percent',\n\t\tvalueType: 'number',\n\t\texampleInput: 0.731,\n\t\ttitleTagReplacement: '',\n\t\t_autoFormat: {\n\t\t\tautoFormatFunction: (typedValue, columnFormat, columnUnitSummary) => {\n\t\t\t\tif ('number' === columnUnitSummary?.unitType) {\n\t\t\t\t\tlet adjustedColumnUnitSummary = {\n\t\t\t\t\t\tmin: columnUnitSummary.min * 100,\n\t\t\t\t\t\tmax: columnUnitSummary.max * 100,\n\t\t\t\t\t\tmedian: columnUnitSummary.median * 100,\n\t\t\t\t\t\tmaxDecimals: Math.max(columnUnitSummary.maxDecimals - 2, 0),\n\t\t\t\t\t\tunitType: columnUnitSummary.unitType\n\t\t\t\t\t};\n\t\t\t\t\tlet format = generateImplicitNumberFormat(adjustedColumnUnitSummary);\n\t\t\t\t\treturn ssf.format(format._autoFormat.autoFormatCode, typedValue * 100) + '%';\n\t\t\t\t} else {\n\t\t\t\t\treturn ssf.format('#,##0%', typedValue);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t{\n\t\tformatTag: 'pct0',\n\t\tformatCode: '#,##0%',\n\t\tformatCategory: 'percent',\n\t\tvalueType: 'number',\n\t\texampleInput: 0.731,\n\t\ttitleTagReplacement: ''\n\t},\n\t{\n\t\tformatTag: 'pct1',\n\t\tformatCode: '#,##0.0%',\n\t\tformatCategory: 'percent',\n\t\tvalueType: 'number',\n\t\texampleInput: 0.731,\n\t\ttitleTagReplacement: ''\n\t},\n\t{\n\t\tformatTag: 'pct2',\n\t\tformatCode: '#,##0.00%',\n\t\tformatCategory: 'percent',\n\t\tvalueType: 'number',\n\t\texampleInput: 0.731,\n\t\ttitleTagReplacement: ''\n\t},\n\t{\n\t\tformatTag: 'pct3',\n\t\tformatCode: '#,##0.000%',\n\t\tformatCategory: 'percent',\n\t\tvalueType: 'number',\n\t\texampleInput: 0.731,\n\t\ttitleTagReplacement: ''\n\t}\n];\n", "import { tidy, mutate } from '@tidyjs/tidy';\n\nexport function standardizeDateString(date) {\n\tif (date && typeof date === 'string') {\n\t\t// Parses an individual string into a JS date object\n\n\t\tlet dateSplit = date.split(' ');\n\n\t\t// If date doesn't contain timestamp, add one at midnight (avoids timezone interpretation issue)\n\t\tif (!date.includes(':')) {\n\t\t\tdate = date + 'T00:00:00';\n\t\t}\n\n\t\t// Remove any character groups beyond 2 (date and time):\n\t\tif (dateSplit.length > 2) {\n\t\t\tdate = dateSplit[0] + ' ' + dateSplit[1];\n\t\t}\n\n\t\t// Replace microseconds if needed:\n\t\tconst re = /\\.([^\\s]+)/;\n\t\tdate = date.replace(re, '');\n\n\t\t// Remove \"Z\" to avoid timezone interpretation issue:\n\t\tdate = date.replace('Z', '');\n\n\t\t// Replace spaces with \"T\" to conform to ECMA standard:\n\t\tdate = date.replace(' ', 'T');\n\t}\n\n\treturn date;\n}\n\nexport function convertColumnToDate(data, column) {\n\t// Replaces a date column's string values with JS date objects, using the standardizeDateString function\n\n\tdata = tidy(\n\t\tdata,\n\t\tmutate({ [column]: (d) => (d[column] ? new Date(standardizeDateString(d[column])) : null) })\n\t);\n\n\treturn data;\n}\n\nexport function standardizeDateColumn(data, column) {\n\t// Replaces a date column's string values with standardized date strings, using the standardizeDateString function\n\t// Used in Chart.svelte, where using Date objects leads to errors\n\n\tdata = tidy(data, mutate({ [column]: (d) => standardizeDateString(d[column]) }));\n\n\treturn data;\n}\n", "// To-do, replace with import from db-commons\n\nvar EvidenceType;\n(function (EvidenceType) {\n\tEvidenceType['BOOLEAN'] = 'boolean';\n\tEvidenceType['NUMBER'] = 'number';\n\tEvidenceType['STRING'] = 'string';\n\tEvidenceType['DATE'] = 'date';\n})(EvidenceType || (EvidenceType = {}));\n\nvar TypeFidelity;\n(function (TypeFidelity) {\n\tTypeFidelity['INFERRED'] = 'inferred';\n\tTypeFidelity['PRECISE'] = 'precise';\n})(TypeFidelity || (TypeFidelity = {}));\n\nexport const inferValueType = function (columnValue) {\n\tif (typeof columnValue === 'number') {\n\t\treturn EvidenceType.NUMBER;\n\t} else if (typeof columnValue === 'boolean') {\n\t\treturn EvidenceType.BOOLEAN;\n\t} else if (typeof columnValue === 'string') {\n\t\tlet result = EvidenceType.STRING;\n\t\tif (columnValue && columnValue.includes('-')) {\n\t\t\tlet testDateStr = columnValue;\n\t\t\tif (!columnValue.includes(':')) {\n\t\t\t\ttestDateStr = columnValue + 'T00:00';\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tlet testDate = new Date(testDateStr);\n\t\t\t\tif (testDate.toLocaleString().length > 0) {\n\t\t\t\t\tlet numCheck = Number.parseInt(testDate.toLocaleString().substring(0, 1));\n\t\t\t\t\tif (numCheck != null && !isNaN(numCheck)) {\n\t\t\t\t\t\tresult = EvidenceType.DATE;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\t//ignore\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t} else if (columnValue instanceof Date) {\n\t\treturn EvidenceType.DATE;\n\t} else {\n\t\treturn EvidenceType.STRING;\n\t}\n};\n\nexport default function inferColumnTypes(rows) {\n\tif (rows && rows.length > 0) {\n\t\tlet columns = Object.keys(rows[0]);\n\t\tlet columnTypes = columns?.map((column) => {\n\t\t\tlet firstRowWithColumnValue = rows.find((element) =>\n\t\t\t\telement[column] == null ? false : true\n\t\t\t);\n\t\t\tif (firstRowWithColumnValue) {\n\t\t\t\tlet inferredType = inferValueType(firstRowWithColumnValue[column]);\n\t\t\t\treturn { name: column, evidenceType: inferredType, typeFidelity: TypeFidelity.INFERRED };\n\t\t\t} else {\n\t\t\t\treturn {\n\t\t\t\t\tname: column,\n\t\t\t\t\tevidenceType: EvidenceType.STRING,\n\t\t\t\t\ttypeFidelity: TypeFidelity.INFERRED\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\t\treturn columnTypes;\n\t}\n\treturn undefined;\n}\n"],
  "mappings": "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",
  "names": ["import_ssf", "ssf", "import_ssf", "ssf", "EvidenceType", "TypeFidelity", "ssf"]
}
